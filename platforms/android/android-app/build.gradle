apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "lol.dbeef.spelunky_psp"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        // Set the apk base name.
        setProperty("archivesBaseName", "Spelunky_PSP")

        externalNativeBuild {
            cmake {
            	version "3.10.2+"
                // Add any cmake options here.

                def ANDROID_DEPS_ARMEABI_V7A=System.getenv('ANDROID_DEPS_ARMEABI_V7A')
                def ANDROID_DEPS_ARM64_V8A=System.getenv('ANDROID_DEPS_ARM64_V8A')

                def ANDROID_NDK_HOME=System.getenv('ANDROID_NDK_HOME')

                if (ANDROID_DEPS_ARM64_V8A == null || ANDROID_DEPS_ARMEABI_V7A == null || ANDROID_NDK_HOME == null)
                {
                    throw new GradleException("ANDROID_DEPS_ARMEABI_V7A, ANDROID_DEPS_ARM64_V8A, ANDROID_NDK_HOME must be present in environment.")
                }
                else
                {
                    println "ANDROID_DEPS_ARM64_V8A is: " + ANDROID_DEPS_ARM64_V8A
                    println "ANDROID_DEPS_ARMEABI_V7A is: " + ANDROID_DEPS_ARMEABI_V7A
                    println "ANDROID_NDK_HOME is: " + ANDROID_NDK_HOME   
                }

                arguments "-DANDROID_STL=c++_static", 
                          "-DANDROID=TRUE",
                          "-DCMAKE_BUILD_TYPE=Release",
                          "-DANDROID_NDK=" + ANDROID_NDK_HOME,
                          "-DCMAKE_TOOLCHAIN_FILE=" + ANDROID_NDK_HOME + "/build/cmake/android.toolchain.cmake",
                          "-DCMAKE_PREFIX_PATH=" + ANDROID_DEPS_ARMEABI_V7A + ";" + ANDROID_DEPS_ARM64_V8A
            }
        }

        ndk {
        	version "18.1.5063045"
            // Limiting to a smaller set of  ABIs:
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    sourceSets {
        main {
            // No external assets are required, as libSpelunky_PSP.so has all required assets resource-compiled in it.
            // No external dynamic libraries are required, as libSpelunky_PSP.so links SDL statically.
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
        	version "3.10.2+"
            path "../../../CMakeLists.txt"

            // Using one top level build dir for all build related files to reduce clutter.
            buildStagingDirectory file("${buildDir}/../.externalNativeBuild/${project.name}")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.so'])
}
